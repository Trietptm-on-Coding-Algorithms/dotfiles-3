#!/usr/bin/env bash
# Author: Nathan Farrar
# Email: nfarrar@crunk.io
# Website: https://crunk.io/
# Description: Prevents vcsh from failing when file conflicts exist.
# Notes:
# - Compatible with branches.
# - $VCSH_REPO_NAME is populated by the vcsh script.
# - If `post-delete` vcsh hook is added, this can be used in conjunction with
#   a post-delete hook to restore system to original state when deleting
#   repositories.
# - Verbose & debug flags are currently hardcoded. Pending request to expose
#   these from vcsh to hook environment, so these can be determined at runtime,
#   rather than changing them in this config.


# Configuration.
HOOK_VERBOSE_MSGS=1
HOOK_DEBUG=0
HOOK_DEBUG_FILE='/tmp/vcsh-hook-debug.log'
HOOK_BACKUP_ROOT_PATH="$HOME/.cache/vcsh/backup"

# Echo verbose output only if $HOOK_VERBOSE_MSGS is set to 1.
# NOTE: The flag is currently hardcoded. If VCSH exposes --verbose to the
# hook, this can be set automatically.
verbose() {
  [[ -z $1 ]] && return 1
  [[ $HOOK_VERBOSE_MSGS -eq 0 ]] && return 0
  echo -e "\x1b[32mHOOK:\t$1\x1b[0m"
}

verbose 'Executing backup-file-conflicts hook.'
verbose "Any conflicting files will be moved to $HOOK_BACKUP_ROOT_PATH."

if [[ $HOOK_DEBUG -eq 1 ]]; then
  verbose "Writing debug output to $HOOK_DEBUG_FILE."
  date >> "$HOOK_DEBUG_FILE"
  printenv >> "$HOOK_DEBUG_FILE"
  echo -e "\n" >> "$HOOK_DEBUG_FILE"
fi

# Parse objects from the git worktree. $object is a path, relative to $HOME.
for object in $(git ls-tree -r "origin/$VCSH_REPO_NAME" | awk '{print $4}'); do
  if test -e "$object"; then
    # Calculate the full path where the backed-up file should be moved. This
    # is the combination of the backup directory and the original files 
    # relative path from $HOME, i.e. '~/.config/vim/vimrc' would be moved to
    #  ~/.cache/vcsh/backup/.config/vim/vimrc.
    file_src_path="$HOME/$object"
    file_dst_path="$HOOK_BACKUP_ROOT_PATH/$object"
    file_dst_dir="$(dirname $file_dst_path)"

    # If the target directory doesn't already exist, create it.
    if [[ ! -d "$file_dst_dir" ]]; then
      verbose "Creating directory $file_dst_dir"
      mkdir -p "$file_dst_dir"
    fi

    # Move the original file to the backup directory.
    verbose "Moving file $file_src_path to $file_dst_path."
    mv "$file_src_path" "$file_dst_path"
  fi

done
